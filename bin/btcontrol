#!/usr/bin/env python

import argparse
import socket
import nmap
import pickle
import requests
import sys
import os
from pathlib import Path

class Box:
    def __init__(self, addr, scandetails = None):
        """
        addr: IP address
        scandetails: details from nmap scan
        """
        self.addr = addr
        self.scandetails = scandetails
        self.us = False #is this our own IP address
        self.p22 = self.scandetails['tcp'][22]['state']
        self.p5000 = self.scandetails['tcp'][5000]['state']
        self.beebox = (self.p22=='open') and (self.p5000=='open')
        self.lastsuccess = None
        if self.beebox:
            self.getid()
        
        
    def callapi(self,endpointcall,printcall=False):
        if printcall: print(endpointcall)
        api_url = "http://%s:5000/%s" % (self.addr, endpointcall)
        #print(api_url)
        try:
            response = requests.get(api_url)
        except requests.exceptions.ConnectionError:
            print("Failed to connect (%s)" % api_url)
            return None
        try:
            response = response.json()
        except: #removed "requests.exceptions.JSONDecodeError:" #simplejson.errors.JSONDecodeError can also be the exception. Might be to do with https://github.com/psf/requests/issues/4842
            pass        
        return str(response)

    def getid(self):
        id = self.callapi('getid')
        if id!='<Response [404]>':
            self.id = id
        else:
            self.beebox = False
        
    def display(self):
        notes = ""
        notes+="this computer" if self.us else ""
        notes+="Box %s" % self.id if self.beebox else ""
        status = ""
        if self.lastsuccess==True: status+=" ok "
        if self.lastsuccess==False: status+=" error "
        if self.lastsuccess==None: status+=" - "
        link = "http://%s:8000" % self.addr if self.beebox else self.addr
        print("%30s | %7s | %7s | %15s | %s" % (link,self.p22,self.p5000,notes,status))
        
    def start(self):
        if not self.beebox: return
        res = self.callapi('start')
        if hasattr(res,'content'):
          self.lastsuccess = (res.content==b'Collection Started')
        
    def stop(self):
        if not self.beebox: return
        res = self.callapi('stop')
        if hasattr(res,'content'):
          self.lastsuccess = (res.content==b'Collection Stopped')

    def reboot(self):
        if not self.beebox: return
        res = self.callapi('reboot')
             
    def sessionset(self,sessionid,setid):
        if not self.beebox: return
        self.callapi('setlabel/a%s,%s' % (sessionid,setid))
        
    def configure(self, purpose, ds=0,interval=0.5):
        """Configure the exposure etc to either calibration or experiment mode"""
        if not self.beebox: return
        if purpose == 'cal':
            exposure = 1000
            predelay = 165
            interval = 5
            delay = 100
        if purpose == 'exp':
            exposure = 90
            predelay = 165
            delay = 100
            interval = interval
        print("   configuring box %s" % self.id)
        res = self.callapi('config/exposure/%d' % exposure,True)
        res = self.callapi('config/predelay/%d' % predelay,True)
        res = self.callapi('config/delay/%d' % delay,True)
        res = self.callapi('set/trigger/skipnoflashes/5000',True)
        res = self.callapi('set/trigger/t/%0.2f' % interval,True)
        res = self.callapi('set/trigger/ds/%0.2f' % ds,True)
        res = self.callapi('set/trigger/flashseq/1',True)
        
        
        if hasattr(res,'content'):
          self.lastsuccess = (res.content==b'...') #just check last one... not sure if it's really done, but hopefully.
        
    def rsync(self,pwfile,savepath,downloadrestriction=''):
        if not self.beebox: return        
        print("Downloading from box %s" % self.id)
        sourcepath = '/home/pi/beephotos'
        if len(downloadrestriction)>0:
            sourcepath = sourcepath+'/'+downloadrestriction+'/*'
            savepath = savepath + '/'+downloadrestriction

        cmd = 'rsync --rsh="sshpass -f %s ssh -l pi -o StrictHostKeyChecking=no" -z pi@%s:%s %s -a' % (pwfile,self.addr,sourcepath,savepath)
        print("Running:\n%s\n" % cmd)
        
        os.system(cmd)
    
def get_ip():
    """
    Returns the IP address of the adaptor that would route to
    an internet IP address.    
    from https://stackoverflow.com/a/60656570/8970017
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('10.255.255.255', 1))
        ipaddr = s.getsockname()[0]
    except:
        ipaddr = '127.0.0.1'
    finally:
        s.close()
    return ipaddr

def scan_our_subnet(ouripaddr,boxes = []):
    """
    Scans x.x.x.* looking for port 5000 open
    
    Pass it a previous list to add to, if new items found
    """
    nm = nmap.PortScanner()
    searchips = '.'.join((ipaddr.split('.')[:3]+['*']))
    nm.scan(searchips,'22,5000',arguments='-T5')
    for addr, details in nm.analyse_nmap_xml_scan()['scan'].items():
        if addr in [box.addr for box in boxes]: 
            continue
        box = Box(addr, details)
        if ouripaddr==addr: box.us = True
        boxes.append(box)
    return boxes
        

parser = argparse.ArgumentParser(description='Controls multiple tracking systems.')
parser.add_argument('--scan',help='Refresh the scan cache',action="store_true")
parser.add_argument('--calconfig',help='Configure exposure, firing rate etc ready for calibration mode',action="store_true")
parser.add_argument('--expconfig',help='Configure exposure, firing rate etc ready for experiment mode',action="store_true")
parser.add_argument('--session',help='Set the session id',type=str,required=False)
parser.add_argument('--set',help='Set the set id',type=str,required=False)
parser.add_argument('--start',help='Start all boxes',action="store_true")
parser.add_argument('--stop',help='Start all boxes',action="store_true")
parser.add_argument('--interval',help='Interval in seconds',type=float,required=False)
parser.add_argument('--rsynclocal',help='Location of local destination of rsync, e.g. btcontrol --rsynclocal ~/Documents/beedata',type=str,required=False)
parser.add_argument('--rsync',help='Copy all photos from box to local computer. e.g. btcontrol --rsync --pwfile ~/Documents/Research/rsync_bee/pw.txt',type=str,required=False,nargs='?')
parser.add_argument('--pwfile',help='Configure the path and file containing ssh password.',type=str,required=False)
parser.add_argument('--reboot',help='Reboot the pi',action="store_true")
args = parser.parse_args()

configpath = os.path.expanduser('~')+'/.btcontrol/'
os.makedirs(configpath,exist_ok=True)

if args.interval:
    interval = args.interval
else:
    interval = 0.5
        
ipaddr = get_ip()
if args.scan: 
    boxes = []
    for i in range(3):
        print("Rescanning... %d/3\n" % (i+1))
        boxes = scan_our_subnet(ipaddr,boxes)
    pickle.dump(boxes,open(configpath+'cached_boxes.pkl','wb'))
else:
    try:
        boxes = pickle.load(open(configpath+'cached_boxes.pkl','rb'))
    except:
        print("Cache not found, need to scan. Use --scan")
        sys.exit(1)

if args.session is not None:
    print("Setting new session id: %s" % args.session)
    sessionid = args.session
else:
    try:
        sessionid = pickle.load(open(configpath+'cached_sessionid.pkl','rb'))
    except:
        print("WARNING: NO SESSION ID SET, use --session IDOFSESSION")
        sessionid = "unnamed_session"
  
if args.pwfile is not None:
    print("Password file: %s" % args.pwfile)
    pwfile = args.pwfile
else:
    try:
        pwfile = pickle.load(open(configpath+'cached_pwfile.pkl','rb'))
    except:
        pwfile = None
pickle.dump(pwfile,open(configpath+'cached_pwfile.pkl','wb'))    
      
if args.rsynclocal is not None:
    print("Local destination: %s" % args.rsynclocal)
    rsynclocal = args.rsynclocal
else:
    try:
        rsynclocal = pickle.load(open(configpath+'cached_rsynclocal.pkl','rb'))
    except:
        rsynclocal = "."        
pickle.dump(rsynclocal,open(configpath+'cached_rsynclocal.pkl','wb'))    

if args.set is not None:
    print("Setting new set id: %s" % args.set)
    setid = args.set
else:
    try:
        setid = pickle.load(open(configpath+'cached_setid.pkl','rb'))
    except:
        print("WARNING: NO SET ID SET, use --set IDOFSET")
        setid = "unnamed_session"
    
print("SESSION: %s" % sessionid)
print("SET: %s" % setid)

if args.stop:
    for box in boxes:
        box.stop()     
        
if args.reboot:
    for box in boxes:
        box.reboot()     

if args.calconfig:
    print("Reminder: Setting set to 'cal'")
    setid = 'cal'
    for box in boxes:
        box.configure('cal')
        
if args.expconfig:  
    beeboxes = [box for box in boxes if box.beebox]  
    for i,box in enumerate(beeboxes):
        box.configure('exp',i/len(beeboxes),interval)
        
for box in boxes:
    box.sessionset(sessionid,setid)


        
if args.start:
    for box in boxes:
        box.start()
   
       

if args.rsync is not None:
    os.makedirs(rsynclocal,exist_ok=True)
    for box in boxes:
        box.rsync(pwfile,rsynclocal,args.rsync)        
   
pickle.dump(sessionid,open(configpath+'cached_sessionid.pkl','wb'))    
pickle.dump(setid,open(configpath+'cached_setid.pkl','wb'))    

 
print("Our IP address: %s" % ipaddr)
print("")
print("                 IP Address    | Port 22 | Port 5k | Comments        | Last Command")
for box in boxes:    
    #if not box.beebox: continue #only will show bee boxes.
    box.display()
    
   
